---
alwaysApply: true
---
## Conventions for Code Generation (MVP)

Цель: обеспечить простой, предсказуемый и поддерживаемый код для MVP, строго следуя KISS и YAGNI. Детали и контекст — в `docs/vision.md`.

### Общие принципы
- Делай минимально необходимое для работы сценариев из `vision.md`.
- Маленькие, явные функции и модули; без DI и лишних абстракций.
- Предпочитай линейный поток исполнения и ранние возвраты.
- Не добавляй функциональность «на будущее».

### Технологический контур
- Python 3.11.
- Управление зависимостями: `uv`. Сборочные задачи: `make`.
- Telegram: `aiogram` 3.x, только polling.
- LLM: `openai` client с `base_url` из окружения (OpenRouter).

### Структура и модули
- Соблюдай структуру каталогов из `vision.md` (без новых слоёв/папок).
- Точка входа: `src/app/bot/main.py`. Хендлеры: `src/app/bot/handlers.py`.
- Память сеанса: `src/app/memory/session.py` (in-memory, последние N реплик).
- LLM-обёртка: `src/app/llm/client.py` с одним публичным методом `generate(...)`.

### Конфигурация
- Источник: переменные окружения (+ `.env` через `python-dotenv`, если есть).
- Обязательные: `TELEGRAM_BOT_TOKEN`, `OPENROUTER_API_KEY`. Остальные — с дефолтами.
- Никаких секретов в коде/репозитории. Проверяй наличие обязательных переменных при старте.

### Логирование
- stdlib `logging`, уровень по умолчанию `INFO`, вывод в stdout.
- Логируй только метаданные: `user_id`, длину сообщения, время ответа, статусы.
- Не логируй содержимое пользовательских сообщений.
- Ошибки — с traceback, пользователю возвращай короткое нейтральное сообщение об ошибке.

### Стиль кода
- Типизируй публичные функции и возвращаемые значения; избегай `any`/`object` без необходимости.
- Имена — полные и описательные (функции — глаголы, переменные — сущности).
- Минимум комментариев; только для нетривиальных решений и инвариантов.
- Без лишних `try/except`; перехватывай только ожидаемые ошибки и обрабатывай их осмысленно.
- Формат/линт: `black` + `ruff` через `make` цели.

### Взаимодействие с LLM
- Формируй сообщения в формате Chat API: system + история + текущий запрос.
- Не используй стриминг и сложные параметры; значения по умолчанию (temperature, max_tokens).
- Храни и подавай только последние N реплик из in-memory.

### Обработчики Telegram
- Поддерживай `/start`, `/help`, `/reset` и текстовые сообщения.
- Отправляй `typing` action при запросе к LLM.
- Вся бизнес-логика — простые вызовы памяти и LLM-обёртки.

### Тестирование и коммиты
- Минимальные smoke-проверки запуска где уместно. Без оверинжиниринга тестов.
- Маленькие инкрементальные изменения, понятные сообщения коммитов.

Любые отступления согласовывать и фиксировать в `docs/vision.md` перед реализацией.



